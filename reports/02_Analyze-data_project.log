Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
price_model_avg = np.mean(price_model, axis = 1)
price_model_std = np.std(price_model, axis = 1)

plt.plot(google_data_pre_2014['date'], price_model, alpha = 0.3);

plt.plot(google_data_pre_2014['date'], google_data_pre_2014['open'], c = 'k', label = 'NYSE data')
plt.xlabel('date')
plt.ylabel('opening price (\$)');

skip = 100
plt.errorbar(google_data_pre_2014['date'][::skip], price_model_avg[::skip],
             yerr = price_model_std[::skip], 
             fmt = 'o',
             c = 'r', 
             label = 'model result', 
            zorder = 3);
plt.legend();
    
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_2216/2119108355.py[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mprice_model_std[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mstd[0m[0;34m([0m[0mprice_model[0m[0;34m,[0m [0maxis[0m [0;34m=[0m [0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[0;32m----> 4[0;31m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mgoogle_data_pre_2014[0m[0;34m[[0m[0;34m'date'[0m[0;34m][0m[0;34m,[0m [0mprice_model[0m[0;34m,[0m [0malpha[0m [0;34m=[0m [0;36m0.3[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mgoogle_data_pre_2014[0m[0;34m[[0m[0;34m'date'[0m[0;34m][0m[0;34m,[0m [0mgoogle_data_pre_2014[0m[0;34m[[0m[0;34m'open'[0m[0;34m][0m[0;34m,[0m [0mc[0m [0;34m=[0m [0;34m'k'[0m[0;34m,[0m [0mlabel[0m [0;34m=[0m [0;34m'NYSE data'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/matplotlib/pyplot.py[0m in [0;36mplot[0;34m(scalex, scaley, data, *args, **kwargs)[0m
[1;32m   3017[0m [0;34m@[0m[0m_copy_docstring_and_deprecators[0m[0;34m([0m[0mAxes[0m[0;34m.[0m[0mplot[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3018[0m [0;32mdef[0m [0mplot[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0mscalex[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mscaley[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3019[0;31m     return gca().plot(
[0m[1;32m   3020[0m         [0;34m*[0m[0margs[0m[0;34m,[0m [0mscalex[0m[0;34m=[0m[0mscalex[0m[0;34m,[0m [0mscaley[0m[0;34m=[0m[0mscaley[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3021[0m         **({"data": data} if data is not None else {}), **kwargs)

[0;32m/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/matplotlib/axes/_axes.py[0m in [0;36mplot[0;34m(self, scalex, scaley, data, *args, **kwargs)[0m
[1;32m   1603[0m         """
[1;32m   1604[0m         [0mkwargs[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mnormalize_kwargs[0m[0;34m([0m[0mkwargs[0m[0;34m,[0m [0mmlines[0m[0;34m.[0m[0mLine2D[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1605[0;31m         [0mlines[0m [0;34m=[0m [0;34m[[0m[0;34m*[0m[0mself[0m[0;34m.[0m[0m_get_lines[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1606[0m         [0;32mfor[0m [0mline[0m [0;32min[0m [0mlines[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1607[0m             [0mself[0m[0;34m.[0m[0madd_line[0m[0;34m([0m[0mline[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/matplotlib/axes/_base.py[0m in [0;36m__call__[0;34m(self, data, *args, **kwargs)[0m
[1;32m    313[0m                 [0mthis[0m [0;34m+=[0m [0margs[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    314[0m                 [0margs[0m [0;34m=[0m [0margs[0m[0;34m[[0m[0;36m1[0m[0;34m:[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 315[0;31m             [0;32myield[0m [0;32mfrom[0m [0mself[0m[0;34m.[0m[0m_plot_args[0m[0;34m([0m[0mthis[0m[0;34m,[0m [0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    316[0m [0;34m[0m[0m
[1;32m    317[0m     [0;32mdef[0m [0mget_next_color[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/matplotlib/axes/_base.py[0m in [0;36m_plot_args[0;34m(self, tup, kwargs, return_kwargs)[0m
[1;32m    499[0m [0;34m[0m[0m
[1;32m    500[0m         [0;32mif[0m [0mx[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m!=[0m [0my[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 501[0;31m             raise ValueError(f"x and y must have same first dimension, but "
[0m[1;32m    502[0m                              f"have shapes {x.shape} and {y.shape}")
[1;32m    503[0m         [0;32mif[0m [0mx[0m[0;34m.[0m[0mndim[0m [0;34m>[0m [0;36m2[0m [0;32mor[0m [0my[0m[0;34m.[0m[0mndim[0m [0;34m>[0m [0;36m2[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: x and y must have same first dimension, but have shapes (1046,) and (1762, 100)
ValueError: x and y must have same first dimension, but have shapes (1046,) and (1762, 100)

